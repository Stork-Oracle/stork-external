name: CI

on:
  push:

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      docker:
        image: docker:19.03.12
        options: --privileged

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.3'

      - name: Cache Go modules
        id: go-cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
            ${{ runner.os }}-go-

      - name: Clean Go module cache if needed
        run: |
          if ! go mod download 2>/dev/null; then
            echo "Module download failed, cleaning cache..."
            go clean -modcache
            go mod download
          fi

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Run tests
        run: make test
        env:
          TARGETPLATFORM: linux/amd64

  data-provider-codegen-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.3'

      - name: Install CLI directly
        run: |
          go build -o $(go env GOPATH)/bin/stork-generate ./apps/cmd/generate
  
      - name: Run update command
        run: stork-generate update

      - name: Check for changes
        run: |
          echo "Checking for changes in generated code..."
          if [[ $(git status --porcelain) ]]; then
            echo "Generated code is out of sync. Please run 'stork-generate update' and commit the changes."
            git diff
            exit 1
          fi

  test-evm:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './contracts/evm/package-lock.json'

      - name: Install dependencies
        run: npm install
        working-directory: ./contracts/evm

      - name: Run hardhat tests
        run: |
          # Generate a random 32-byte (64 character) hex string prefixed with 0x
          RANDOM_KEY=$(openssl rand -hex 32)
          echo "Using generated private key: $RANDOM_KEY"
          npx hardhat vars set PRIVATE_KEY $RANDOM_KEY
          npx hardhat vars set ARBISCAN_API_KEY fake
          npx hardhat vars set POLYGON_API_KEY fake
          npx hardhat vars set ETHERSCAN_API_KEY fake
          npx hardhat vars set CORE_TESTNET_API_KEY fake
          npx hardhat vars set CORE_MAINNET_API_KEY fake
          npx hardhat vars set ROOTSTOCK_TESTNET_API_KEY fake
          npx hardhat vars set SCROLL_MAINNET_API_KEY fake
          npx hardhat vars set SONEIUM_MAINNET_RPC_URL fake
          npx hardhat vars set ETHERSCAN_SOPHON_API_KEY fake
          npx hardhat vars set SONEIUM_MAINNET_BLOCKSCOUT_URL fake
          npx hardhat vars set CRONOS_L2_API_KEY fake

          npx hardhat --network hardhat test
        working-directory: ./contracts/evm
        
  test-solana:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './contracts/solana/package-lock.json'

      - name: Install dependencies
        run: npm install
        working-directory: ./contracts/solana

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
          toolchain: 1.85.1

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/
          key: ${{ runner.os }}-cargo-solana-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-solana-

      - name: Cache Solana CLI
        uses: actions/cache@v4
        with:
          path: |
            ~/.local/share/solana/install
            ~/.config/solana/id.json
          key: ${{ runner.os }}-solana

      - name: Install Solana CLI
        run: |
          [ -f ~/.local/share/solana/install/active_release/bin/solana ] || sh -c "$(curl -sSfL https://release.anza.xyz/v1.18.18/install)"
          echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH

      - name: Setup Solana
        run: |
          [ -f ~/.config/solana/id.json ] || solana-keygen new --no-bip39-passphrase -o ~/.config/solana/id.json
          solana config set --url localhost

      - name: Cache Anchor CLI
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/anchor
          key: ${{ runner.os }}-anchor-0.30.1

      - name: Install Anchor CLI
        run: |
          if ! command -v anchor &> /dev/null; then
            cargo install --git https://github.com/coral-xyz/anchor --tag v0.30.1 anchor-cli
          fi

      - name: Run rust tests
        run: |
          cargo test
        working-directory: ./contracts/solana/programs/stork

      - name: Run anchor tests
        run: |
          RUSTUP_TOOLCHAIN=nightly-2025-04-01 anchor test
        working-directory: ./contracts/solana/programs/stork

  test-sui:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/
          key: ${{ runner.os }}-cargo-sui-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-sui-

      - name: Cache Sui CLI
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/sui
          key: ${{ runner.os }}-sui-cli

      - name: Install Sui
        run: |
          if ! command -v sui &> /dev/null; then
            cargo install --locked --git https://github.com/MystenLabs/sui.git sui --features tracing
          fi
          sui --version

      - name: Run Sui tests
        run: |
          sui move test
        working-directory: ./contracts/sui/contracts

  test-cosmwasm:
    runs-on: ubuntu-latest

    steps:
      
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/
          key: ${{ runner.os }}-cargo-cosmwasm-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-cosmwasm-

      - name: Run tests
        run: |
          cargo test
        working-directory: ./contracts/cosmwasm/contracts

  test-aptos:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          cache: 'pip'
          cache-dependency-path: '**/requirements.txt'
          
      - name: Install pip dependencies
        run: |
          python -m pip install --upgrade pip
          pip install packaging
          
      - name: Cache Aptos CLI
        uses: actions/cache@v4
        with:
          path: |
            ~/.aptos
            ~/.local/bin/aptos
          key: ${{ runner.os }}-aptos-cli
          
      - name: Install Aptos CLI
        run: |
          if ! command -v aptos &> /dev/null; then
            mkdir -p ~/.local/bin
            wget "https://github.com/aptos-labs/aptos-core/releases/download/aptos-cli-v6.2.0/aptos-cli-6.2.0-Linux-x86_64.zip"
            unzip aptos-cli-6.2.0-Linux-x86_64.zip
            chmod +x aptos
            mv aptos ~/.local/bin/
          fi
          aptos --version

      - name: Run Aptos tests
        run: |
          aptos move test --move-2 --dev
        working-directory: ./contracts/aptos/contracts
  
  test-fuel:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/
          key: ${{ runner.os }}-cargo-fuel-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-fuel-

      - name: Install Fuel Toolchain
        run: |
          yes | curl https://install.fuel.network | sh
          echo "${HOME}/.fuelup/bin" >> $GITHUB_PATH

      - name: Pin Forc Version
        run: |
          fuelup toolchain new pinned-forc
          fuelup component add forc@0.68.4
          fuelup component add fuel-core@0.43.2

      - name: Run Unit Tests
        run: |
          forc test
        working-directory: ./contracts/fuel/contracts/stork/

      - name: Run integration tests
        run: |
          cargo test
        working-directory: ./contracts/fuel/contracts/stork/
        
