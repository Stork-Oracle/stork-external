// Code initially generated by gen.go.
// This file tests correctly loading and parsing the new source config.
package config

import (
	"testing"

	"github.com/Stork-Oracle/stork-external/apps/data_provider/pkg/configs"
	"github.com/Stork-Oracle/stork-external/apps/data_provider/pkg/sources/boringvaultevm"
	"github.com/Stork-Oracle/stork-external/apps/data_provider/pkg/utils"
	"github.com/stretchr/testify/assert"
)

func TestValidBoringVaultEvmConfig(t *testing.T) {
	validConfig := `
	{
	  "sources": [
		{
		  "id": "MY_VALUE",
		  "config": {
			"dataSource": "boringvaultevm",
			"updateFrequency": "1s",
			"httpProviderUrl": "https://phoenix-rpc.plumenetwork.xyz/",
			"contractAddress": "0x0000000000000000000000000000000000000000"
		  }
		}
	  ]
	}`

	config, err := configs.LoadConfigFromBytes([]byte(validConfig))
	assert.NoError(t, err)

	assert.Equal(t, 1, len(config.Sources))

	sourceConfig := config.Sources[0]

	dataSourceID, err := utils.GetDataSourceID(sourceConfig.Config)
	assert.NoError(t, err)
	assert.Equal(t, boringvaultevm.BoringVaultEvmDataSourceID, dataSourceID)

	sourceSpecificConfig, err := boringvaultevm.GetSourceSpecificConfig(sourceConfig)
	assert.NoError(t, err)
	assert.NotNil(t, sourceSpecificConfig)

	assert.Equal(t, "1s", sourceSpecificConfig.UpdateFrequency)
	assert.Equal(t, "https://phoenix-rpc.plumenetwork.xyz/", sourceSpecificConfig.HttpProviderUrl)
	assert.Equal(t, "0x0000000000000000000000000000000000000000", sourceSpecificConfig.ContractAddress)
}
