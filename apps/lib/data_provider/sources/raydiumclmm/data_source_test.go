// Code initially generated by gen.go.

package raydiumclmm

import (
	"math"
	"testing"

	bin "github.com/gagliardetto/binary"
)

func TestCalculatePrice(t *testing.T) {
	tests := []struct {
		name          string
		poolState     PoolState
		expectedPrice float64
	}{
		{
			name: "Normal Case",
			poolState: PoolState{
				SqrtPriceX64:  bin.Uint128{Hi: 1, Lo: 0},
				MintDecimalsA: 6,
				MintDecimalsB: 6,
			},
			expectedPrice: 1.0,
		},
		{
			name: "Zero Price",
			poolState: PoolState{
				SqrtPriceX64:  bin.Uint128{Hi: 0, Lo: 0},
				MintDecimalsA: 6,
				MintDecimalsB: 6,
			},
			expectedPrice: 0.0,
		},
		{
			name: "Large Numbers",
			poolState: PoolState{
				SqrtPriceX64:  bin.Uint128{Hi: 0xFFFFFFFFFFFFFFFF, Lo: 0xFFFFFFFFFFFFFFFF},
				MintDecimalsA: 6,
				MintDecimalsB: 6,
			},
			expectedPrice: math.Pow(2, 128) / math.Pow(2, 64) * math.Pow(2, 128) / math.Pow(2, 64),
		},
		{
			name: "DecimalsA larger",
			poolState: PoolState{
				SqrtPriceX64:  bin.Uint128{Hi: 1, Lo: 0},
				MintDecimalsA: 8,
				MintDecimalsB: 6,
			},
			expectedPrice: 100.0,
		},
		{
			name: "DecimalsB larger",
			poolState: PoolState{
				SqrtPriceX64:  bin.Uint128{Hi: 1, Lo: 0},
				MintDecimalsA: 6,
				MintDecimalsB: 8,
			},
			expectedPrice: 0.01,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			actualPrice := calculatePrice(tt.poolState)
			if math.Abs(actualPrice-tt.expectedPrice) > 1e-9 {
				t.Errorf("Expected %f, got %f", tt.expectedPrice, actualPrice)
			}
		})
	}
}
