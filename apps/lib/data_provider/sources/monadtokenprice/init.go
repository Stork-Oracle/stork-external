// Code initially generated by gen.go.
// This file initializes the data source and registers it, allowing it to be built by the DataProviderRunner.

package monadtokenprice

import (
	"github.com/Stork-Oracle/stork-external/apps/lib/data_provider/sources"
	"github.com/Stork-Oracle/stork-external/apps/lib/data_provider/types"
	"github.com/Stork-Oracle/stork-external/apps/lib/data_provider/utils"
	"github.com/mitchellh/mapstructure"
)

var MonadTokenPriceDataSourceId types.DataSourceId = types.DataSourceId(utils.GetCurrentDirName())

type monadTokenPriceDataSourceFactory struct{}

func (f *monadTokenPriceDataSourceFactory) Build(sourceConfig types.DataProviderSourceConfig) types.DataSource {
	return newMonadTokenPriceDataSource(sourceConfig)
}

func init() {
	sources.RegisterDataSourceFactory(MonadTokenPriceDataSourceId, &monadTokenPriceDataSourceFactory{})
}

// assert we're satisfying our interfaces
var (
	_ types.DataSource        = (*monadTokenPriceDataSource)(nil)
	_ types.DataSourceFactory = (*monadTokenPriceDataSourceFactory)(nil)
)

func GetSourceSpecificConfig(sourceConfig types.DataProviderSourceConfig) (MonadTokenPriceConfig, error) {
	var config MonadTokenPriceConfig
	err := mapstructure.Decode(sourceConfig.Config, &config)

	return config, err
}
