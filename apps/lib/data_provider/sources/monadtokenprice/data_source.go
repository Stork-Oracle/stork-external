// Code initially generated by gen.go.
// This file contains the implementation for pulling data from the data source and putting it on the updatesCh.

package monadtokenprice

import (
	"context"
	"github.com/Stork-Oracle/stork-external/apps/lib/data_provider/types"
	"github.com/Stork-Oracle/stork-external/apps/lib/data_provider/utils"
	"github.com/rs/zerolog"
)

type monadTokenPriceDataSource struct {
	monadTokenPriceConfig MonadTokenPriceConfig
	valueId 	types.ValueId
	logger 		zerolog.Logger
	// TODO: set any necessary parameters
}

func newMonadTokenPriceDataSource(sourceConfig types.DataProviderSourceConfig) *monadTokenPriceDataSource {
	monadTokenPriceConfig, err := GetSourceSpecificConfig(sourceConfig)
	if err != nil {
		panic("unable to decode config: " + err.Error())
	}

	// TODO: add any necessary initialization code
	return &monadTokenPriceDataSource{
		monadTokenPriceConfig: monadTokenPriceConfig,
		valueId: 	sourceConfig.Id,
		logger: 	utils.DataSourceLogger(MonadTokenPriceDataSourceId),
	}
}

func (r monadTokenPriceDataSource) RunDataSource(ctx context.Context, updatesCh chan types.DataSourceUpdateMap) {
	// TODO: Write all logic to fetch data points and report them to updatesCh
	panic("implement me")
}
