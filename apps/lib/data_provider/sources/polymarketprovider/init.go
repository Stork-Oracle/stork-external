// Code initially generated by gen.go.
// This file initializes the data source and registers it, allowing it to be built by the DataProviderRunner.

package polymarketprovider

import (
	"github.com/Stork-Oracle/stork-external/apps/lib/data_provider/sources"
	"github.com/Stork-Oracle/stork-external/apps/lib/data_provider/types"
	"github.com/Stork-Oracle/stork-external/apps/lib/data_provider/utils"
	"github.com/mitchellh/mapstructure"
)

var PolymarketProviderDataSourceId types.DataSourceId = types.DataSourceId(utils.GetCurrentDirName())

type polymarketProviderDataSourceFactory struct{}

func (f *polymarketProviderDataSourceFactory) Build(sourceConfig types.DataProviderSourceConfig) types.DataSource {
	return newPolymarketProviderDataSource(sourceConfig)
}

func init() {
	sources.RegisterDataSourceFactory(PolymarketProviderDataSourceId, &polymarketProviderDataSourceFactory{})
}

// assert we're satisfying our interfaces
var (
	_ types.DataSource        = (*polymarketProviderDataSource)(nil)
	_ types.DataSourceFactory = (*polymarketProviderDataSourceFactory)(nil)
)

func GetSourceSpecificConfig(sourceConfig types.DataProviderSourceConfig) (PolymarketProviderConfig, error) {
	var config PolymarketProviderConfig
	err := mapstructure.Decode(sourceConfig.Config, &config)

	return config, err
}
