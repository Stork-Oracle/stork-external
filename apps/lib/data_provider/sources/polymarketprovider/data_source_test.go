// Code initially generated by gen.go.
// This file contains unit tests for functions implemented in the data source.

package polymarketprovider

import (
	"testing"
	"time"

	"github.com/Stork-Oracle/stork-external/apps/lib/data_provider/types"
	"github.com/stretchr/testify/assert"
)

func TestPolymarketProviderDataSourceCreation(t *testing.T) {
	// Test valid configuration
	config := types.DataProviderSourceConfig{
		Id: "TEST_POLYMARKET",
		Config: map[string]interface{}{
			"dataSource":      "polymarketprovider",
			"tokenId":         "60487116984468020978247225474488676749601001829886755968952521846780452448915",
			"side":            "buy",
			"updateFrequency": "10s",
		},
	}

	// Should not panic with valid config
	dataSource := newPolymarketProviderDataSource(config)
	assert.NotNil(t, dataSource)
	assert.Equal(t, "TEST_POLYMARKET", string(dataSource.valueId))
	assert.Equal(t, 10*time.Second, dataSource.updateFrequency)
}

func TestPolymarketProviderConfigParsing(t *testing.T) {
	config := types.DataProviderSourceConfig{
		Id: "TEST_CONFIG",
		Config: map[string]interface{}{
			"dataSource":      "polymarketprovider",
			"tokenId":         "test-token-123",
			"side":            "sell",
			"updateFrequency": "5m",
		},
	}

	parsedConfig, err := GetSourceSpecificConfig(config)
	assert.NoError(t, err)
	assert.Equal(t, "polymarketprovider", string(parsedConfig.DataSource))
	assert.Equal(t, "test-token-123", parsedConfig.TokenId)
	assert.Equal(t, "sell", parsedConfig.Side)
	assert.Equal(t, "5m", parsedConfig.UpdateFrequency)
}

func TestPolymarketProviderInvalidConfig(t *testing.T) {
	// Test with invalid update frequency
	config := types.DataProviderSourceConfig{
		Id: "TEST_INVALID",
		Config: map[string]interface{}{
			"dataSource":      "polymarketprovider",
			"tokenId":         "test-token",
			"side":            "buy",
			"updateFrequency": "invalid-duration",
		},
	}

	// Should panic with invalid frequency
	assert.Panics(t, func() {
		newPolymarketProviderDataSource(config)
	})
}
