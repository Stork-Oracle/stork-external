// Code initially generated by gen.go.
// This file contains unit tests for functions implemented in the data source.

package boringvaultevm

import (
	"math/big"
	"testing"
)

func TestCalculatePrice(t *testing.T) {
	tests := []struct {
		name          string
		result        []interface{}
		decimals      int8
		expectedPrice float64
		expectedError bool
	}{
		{
			name: "normal case",
			result: []interface{}{
				big.NewInt(2000000000), // 2 with 9 decimals
			},
			decimals:      9,
			expectedPrice: 2.0,
			expectedError: false,
		},
		{
			name: "zero price",
			result: []interface{}{
				big.NewInt(0),
			},
			decimals:      18,
			expectedPrice: 0.0,
			expectedError: false,
		},
		{
			name: "large number",
			result: []interface{}{
				big.NewInt(1000000000000000000), // 1 with 18 decimals
			},
			decimals:      18,
			expectedPrice: 1.0,
			expectedError: false,
		},
		{
			name: "invalid result type",
			result: []interface{}{
				"not a big.Int",
			},
			decimals:      18,
			expectedPrice: -1.0,
			expectedError: true,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			price, err := calculatePrice(tt.result, tt.decimals)

			if tt.expectedError && err == nil {
				t.Errorf("expected error but got none")
			}

			if !tt.expectedError && err != nil {
				t.Errorf("unexpected error: %v", err)
			}

			if price != tt.expectedPrice {
				t.Errorf("expected price %v, but got %v", tt.expectedPrice, price)
			}
		})
	}
}
