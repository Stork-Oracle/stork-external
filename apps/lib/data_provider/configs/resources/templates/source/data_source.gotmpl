// @path: /apps/lib/data_provider/sources/{{ .LowerStr }}/data_source.go
// Code initially generated by gen.go.
// This file contains the implementation for pulling data from the data source and putting it on the updatesCh.

package {{ .LowerStr }}

import (
	"context"
	"github.com/Stork-Oracle/stork-external/apps/lib/data_provider/types"
)

type {{ .CamelStr }}DataSource struct {
	{{ .CamelStr }}Config {{ .PascalStr }}Config
	// TODO: set any necessary parameters
}

func new{{ .PascalStr }}DataSource(sourceConfig types.DataProviderSourceConfig) *{{ .CamelStr }}DataSource {
	{{ .CamelStr }}Config, err := GetSourceSpecificConfig(sourceConfig)
	if err != nil {
		panic("unable to decode config: " + err.Error())
	}

	// TODO: add any necessary initialization code
	return &{{ .CamelStr }}DataSource{
		{{ .CamelStr }}Config: {{ .CamelStr }}Config,
	}
}

func (r {{ .CamelStr }}DataSource) RunDataSource(ctx context.Context, updatesCh chan types.DataSourceUpdateMap) {
	// TODO: Write all logic to fetch data points and report them to updatesCh
	panic("implement me")
}
