// Code initially generated by gen.go.
package config

import (
	"testing"

	"github.com/Stork-Oracle/stork-external/apps/lib/data_provider/configs"
	"github.com/Stork-Oracle/stork-external/apps/lib/data_provider/sources/raydiumclmm"
	"github.com/Stork-Oracle/stork-external/apps/lib/data_provider/types"
	"github.com/Stork-Oracle/stork-external/apps/lib/data_provider/utils"
	"github.com/stretchr/testify/assert"
)

func TestValidRaydiumCLMMConfig(t *testing.T) {
	validConfig := `
	{
	  "sources": [
		{
		  "id": "SOL_USDC",
		  "config": {
			"dataSource": "raydiumclmm",
			"updateFrequency": "5s",
			"httpProviderUrl": "https://eclipse.helius-rpc.com/",
			"contractAddress": "8sLbNZoA1cfnvMJLPfp98ZLAnFSYCFApfJKMbiXNLwxj"
		  }
		}
	  ]
	}`

	config, err := configs.LoadConfigFromBytes([]byte(validConfig))
	assert.NoError(t, err)

	assert.Equal(t, 1, len(config.Sources))

	sourceConfig := config.Sources[0]
	assert.Equal(t, types.ValueId("SOL_USDC"), sourceConfig.Id)

	dataSourceId, err := utils.GetDataSourceId(sourceConfig.Config)
	assert.NoError(t, err)
	assert.Equal(t, raydiumclmm.RaydiumCLMMDataSourceId, dataSourceId)

	sourceSpecificConfig, err := raydiumclmm.GetSourceSpecificConfig(sourceConfig)
	assert.NoError(t, err)
	assert.NotNil(t, sourceSpecificConfig)

	assert.Equal(t, types.DataSourceId("raydiumclmm"), sourceSpecificConfig.DataSource)
	assert.Equal(t, "5s", sourceSpecificConfig.UpdateFrequency)
	assert.Equal(t, "https://eclipse.helius-rpc.com/", sourceSpecificConfig.HttpProviderUrl)
	assert.Equal(t, "8sLbNZoA1cfnvMJLPfp98ZLAnFSYCFApfJKMbiXNLwxj", sourceSpecificConfig.ContractAddress)
}
