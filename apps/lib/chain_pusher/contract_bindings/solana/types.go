// Code generated by https://github.com/henrymbaldwin/solana-anchor-go. DO NOT EDIT.

package contract_bindings_solana

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type StorkConfig struct {
	StorkSolPublicKey         ag_solanago.PublicKey
	StorkEvmPublicKey         [20]uint8
	SingleUpdateFeeInLamports uint64
	Owner                     ag_solanago.PublicKey
}

func (obj StorkConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `StorkSolPublicKey` param:
	err = encoder.Encode(obj.StorkSolPublicKey)
	if err != nil {
		return err
	}
	// Serialize `StorkEvmPublicKey` param:
	err = encoder.Encode(obj.StorkEvmPublicKey)
	if err != nil {
		return err
	}
	// Serialize `SingleUpdateFeeInLamports` param:
	err = encoder.Encode(obj.SingleUpdateFeeInLamports)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	return nil
}

func (obj *StorkConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `StorkSolPublicKey`:
	err = decoder.Decode(&obj.StorkSolPublicKey)
	if err != nil {
		return err
	}
	// Deserialize `StorkEvmPublicKey`:
	err = decoder.Decode(&obj.StorkEvmPublicKey)
	if err != nil {
		return err
	}
	// Deserialize `SingleUpdateFeeInLamports`:
	err = decoder.Decode(&obj.SingleUpdateFeeInLamports)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	return nil
}

type TemporalNumericValue struct {
	TimestampNs    uint64
	QuantizedValue ag_binary.Int128
}

func (obj TemporalNumericValue) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TimestampNs` param:
	err = encoder.Encode(obj.TimestampNs)
	if err != nil {
		return err
	}
	// Serialize `QuantizedValue` param:
	err = encoder.Encode(obj.QuantizedValue)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TemporalNumericValue) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TimestampNs`:
	err = decoder.Decode(&obj.TimestampNs)
	if err != nil {
		return err
	}
	// Deserialize `QuantizedValue`:
	err = decoder.Decode(&obj.QuantizedValue)
	if err != nil {
		return err
	}
	return nil
}

type TemporalNumericValueEvmInput struct {
	Id                   [32]uint8
	TemporalNumericValue TemporalNumericValue
	PublisherMerkleRoot  [32]uint8
	ValueComputeAlgHash  [32]uint8
	R                    [32]uint8
	S                    [32]uint8
	V                    uint8
	TreasuryId           uint8
}

func (obj TemporalNumericValueEvmInput) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Id` param:
	err = encoder.Encode(obj.Id)
	if err != nil {
		return err
	}
	// Serialize `TemporalNumericValue` param:
	err = encoder.Encode(obj.TemporalNumericValue)
	if err != nil {
		return err
	}
	// Serialize `PublisherMerkleRoot` param:
	err = encoder.Encode(obj.PublisherMerkleRoot)
	if err != nil {
		return err
	}
	// Serialize `ValueComputeAlgHash` param:
	err = encoder.Encode(obj.ValueComputeAlgHash)
	if err != nil {
		return err
	}
	// Serialize `R` param:
	err = encoder.Encode(obj.R)
	if err != nil {
		return err
	}
	// Serialize `S` param:
	err = encoder.Encode(obj.S)
	if err != nil {
		return err
	}
	// Serialize `V` param:
	err = encoder.Encode(obj.V)
	if err != nil {
		return err
	}
	// Serialize `TreasuryId` param:
	err = encoder.Encode(obj.TreasuryId)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TemporalNumericValueEvmInput) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Id`:
	err = decoder.Decode(&obj.Id)
	if err != nil {
		return err
	}
	// Deserialize `TemporalNumericValue`:
	err = decoder.Decode(&obj.TemporalNumericValue)
	if err != nil {
		return err
	}
	// Deserialize `PublisherMerkleRoot`:
	err = decoder.Decode(&obj.PublisherMerkleRoot)
	if err != nil {
		return err
	}
	// Deserialize `ValueComputeAlgHash`:
	err = decoder.Decode(&obj.ValueComputeAlgHash)
	if err != nil {
		return err
	}
	// Deserialize `R`:
	err = decoder.Decode(&obj.R)
	if err != nil {
		return err
	}
	// Deserialize `S`:
	err = decoder.Decode(&obj.S)
	if err != nil {
		return err
	}
	// Deserialize `V`:
	err = decoder.Decode(&obj.V)
	if err != nil {
		return err
	}
	// Deserialize `TreasuryId`:
	err = decoder.Decode(&obj.TreasuryId)
	if err != nil {
		return err
	}
	return nil
}

type TemporalNumericValueFeed struct {
	Id          [32]uint8
	LatestValue TemporalNumericValue
}

func (obj TemporalNumericValueFeed) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Id` param:
	err = encoder.Encode(obj.Id)
	if err != nil {
		return err
	}
	// Serialize `LatestValue` param:
	err = encoder.Encode(obj.LatestValue)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TemporalNumericValueFeed) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Id`:
	err = decoder.Decode(&obj.Id)
	if err != nil {
		return err
	}
	// Deserialize `LatestValue`:
	err = decoder.Decode(&obj.LatestValue)
	if err != nil {
		return err
	}
	return nil
}
