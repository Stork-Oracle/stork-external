// Code generated by https://github.com/henrymbaldwin/solana-anchor-go. DO NOT EDIT.

package contract_bindings_solana

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type StorkConfigAccount struct {
	StorkSolPublicKey         ag_solanago.PublicKey
	StorkEvmPublicKey         [20]uint8
	SingleUpdateFeeInLamports uint64
	Owner                     ag_solanago.PublicKey
}

var StorkConfigAccountDiscriminator = [8]byte{147, 12, 145, 17, 238, 56, 64, 196}

func (obj StorkConfigAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(StorkConfigAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `StorkSolPublicKey` param:
	err = encoder.Encode(obj.StorkSolPublicKey)
	if err != nil {
		return err
	}
	// Serialize `StorkEvmPublicKey` param:
	err = encoder.Encode(obj.StorkEvmPublicKey)
	if err != nil {
		return err
	}
	// Serialize `SingleUpdateFeeInLamports` param:
	err = encoder.Encode(obj.SingleUpdateFeeInLamports)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	return nil
}

func (obj *StorkConfigAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(StorkConfigAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[147 12 145 17 238 56 64 196]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `StorkSolPublicKey`:
	err = decoder.Decode(&obj.StorkSolPublicKey)
	if err != nil {
		return err
	}
	// Deserialize `StorkEvmPublicKey`:
	err = decoder.Decode(&obj.StorkEvmPublicKey)
	if err != nil {
		return err
	}
	// Deserialize `SingleUpdateFeeInLamports`:
	err = decoder.Decode(&obj.SingleUpdateFeeInLamports)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	return nil
}

type TemporalNumericValueFeedAccount struct {
	Id          [32]uint8
	LatestValue TemporalNumericValue
}

var TemporalNumericValueFeedAccountDiscriminator = [8]byte{37, 166, 65, 196, 29, 105, 97, 161}

func (obj TemporalNumericValueFeedAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(TemporalNumericValueFeedAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Id` param:
	err = encoder.Encode(obj.Id)
	if err != nil {
		return err
	}
	// Serialize `LatestValue` param:
	err = encoder.Encode(obj.LatestValue)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TemporalNumericValueFeedAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(TemporalNumericValueFeedAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[37 166 65 196 29 105 97 161]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Id`:
	err = decoder.Decode(&obj.Id)
	if err != nil {
		return err
	}
	// Deserialize `LatestValue`:
	err = decoder.Decode(&obj.LatestValue)
	if err != nil {
		return err
	}
	return nil
}
