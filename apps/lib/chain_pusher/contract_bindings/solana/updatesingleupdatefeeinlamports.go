// Code generated by https://github.com/henrymbaldwin/solana-anchor-go. DO NOT EDIT.

package contract_bindings_solana

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// UpdateSingleUpdateFeeInLamports is the `update_single_update_fee_in_lamports` instruction.
type UpdateSingleUpdateFeeInLamports struct {
	NewSingleUpdateFeeInLamports *uint64

	// [0] = [WRITE] config
	//
	// [1] = [SIGNER] owner
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUpdateSingleUpdateFeeInLamportsInstructionBuilder creates a new `UpdateSingleUpdateFeeInLamports` instruction builder.
func NewUpdateSingleUpdateFeeInLamportsInstructionBuilder() *UpdateSingleUpdateFeeInLamports {
	nd := &UpdateSingleUpdateFeeInLamports{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 2),
	}
	return nd
}

// SetNewSingleUpdateFeeInLamports sets the "new_single_update_fee_in_lamports" parameter.
func (inst *UpdateSingleUpdateFeeInLamports) SetNewSingleUpdateFeeInLamports(new_single_update_fee_in_lamports uint64) *UpdateSingleUpdateFeeInLamports {
	inst.NewSingleUpdateFeeInLamports = &new_single_update_fee_in_lamports
	return inst
}

// SetConfigAccount sets the "config" account.
func (inst *UpdateSingleUpdateFeeInLamports) SetConfigAccount(config ag_solanago.PublicKey) *UpdateSingleUpdateFeeInLamports {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(config).WRITE()
	return inst
}

func (inst *UpdateSingleUpdateFeeInLamports) findFindConfigAddress(knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: stork_config
	seeds = append(seeds, []byte{byte(0x73), byte(0x74), byte(0x6f), byte(0x72), byte(0x6b), byte(0x5f), byte(0x63), byte(0x6f), byte(0x6e), byte(0x66), byte(0x69), byte(0x67)})

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindConfigAddressWithBumpSeed calculates Config account address with given seeds and a known bump seed.
func (inst *UpdateSingleUpdateFeeInLamports) FindConfigAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindConfigAddress(bumpSeed)
	return
}

func (inst *UpdateSingleUpdateFeeInLamports) MustFindConfigAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindConfigAddress(bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindConfigAddress finds Config account address with given seeds.
func (inst *UpdateSingleUpdateFeeInLamports) FindConfigAddress() (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindConfigAddress(0)
	return
}

func (inst *UpdateSingleUpdateFeeInLamports) MustFindConfigAddress() (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindConfigAddress(0)
	if err != nil {
		panic(err)
	}
	return
}

// GetConfigAccount gets the "config" account.
func (inst *UpdateSingleUpdateFeeInLamports) GetConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetOwnerAccount sets the "owner" account.
func (inst *UpdateSingleUpdateFeeInLamports) SetOwnerAccount(owner ag_solanago.PublicKey) *UpdateSingleUpdateFeeInLamports {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(owner).SIGNER()
	return inst
}

// GetOwnerAccount gets the "owner" account.
func (inst *UpdateSingleUpdateFeeInLamports) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

func (inst UpdateSingleUpdateFeeInLamports) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_UpdateSingleUpdateFeeInLamports,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst UpdateSingleUpdateFeeInLamports) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *UpdateSingleUpdateFeeInLamports) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.NewSingleUpdateFeeInLamports == nil {
			return errors.New("NewSingleUpdateFeeInLamports parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Config is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Owner is not set")
		}
	}
	return nil
}

func (inst *UpdateSingleUpdateFeeInLamports) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("UpdateSingleUpdateFeeInLamports")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("     NewSingleUpdateFeeInLamports", *inst.NewSingleUpdateFeeInLamports))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=2]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("config", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta(" owner", inst.AccountMetaSlice.Get(1)))
					})
				})
		})
}

func (obj UpdateSingleUpdateFeeInLamports) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `NewSingleUpdateFeeInLamports` param:
	err = encoder.Encode(obj.NewSingleUpdateFeeInLamports)
	if err != nil {
		return err
	}
	return nil
}
func (obj *UpdateSingleUpdateFeeInLamports) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `NewSingleUpdateFeeInLamports`:
	err = decoder.Decode(&obj.NewSingleUpdateFeeInLamports)
	if err != nil {
		return err
	}
	return nil
}

// NewUpdateSingleUpdateFeeInLamportsInstruction declares a new UpdateSingleUpdateFeeInLamports instruction with the provided parameters and accounts.
func NewUpdateSingleUpdateFeeInLamportsInstruction(
	// Parameters:
	new_single_update_fee_in_lamports uint64,
	// Accounts:
	config ag_solanago.PublicKey,
	owner ag_solanago.PublicKey) *UpdateSingleUpdateFeeInLamports {
	return NewUpdateSingleUpdateFeeInLamportsInstructionBuilder().
		SetNewSingleUpdateFeeInLamports(new_single_update_fee_in_lamports).
		SetConfigAccount(config).
		SetOwnerAccount(owner)
}
