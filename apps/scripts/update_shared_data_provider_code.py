import json
import os
from string import Template

IMPORT_SOURCES_FILE = './apps/lib/data_provider/import_sources.go'
SOURCES_DIR = "./apps/lib/data_provider/sources"
CONFIG_SCHEMA_FILE = './apps/lib/data_provider/resources/config_schema.json'
CONFIG_SCHEMA_TEMPLATE_FILE = './apps/lib/data_provider/resources/config_schema.json.template'


def get_package_names(parent_dir):
    package_names = [d for d in os.listdir(parent_dir) if os.path.isdir(os.path.join(parent_dir, d))]
    return sorted(package_names)


def generate_go_file(directories):
    with open(IMPORT_SOURCES_FILE, 'w') as f:
        f.write("package data_provider\n\n")
        f.write("// Autogenerated by update_shared_data_provider_code.py\n")
        for dir in directories:
            f.write(f'import _ "github.com/Stork-Oracle/stork-external/apps/lib/data_provider/sources/{dir}"\n')
    print(f"Go imports file generated at {IMPORT_SOURCES_FILE}")


def generate_config_schema(directories):
    source_config_schemas = []
    data_source_ids = []

    conditional_source_config_schema_template_str = """
    {
        "if": {
          "properties": {
            "dataSource": { "const": "$dataSource" }
          }
        },
        "then": $source_config_schema
    }
    """
    source_config_template = Template(conditional_source_config_schema_template_str)

    for directory in directories:
        with open(os.path.join(SOURCES_DIR, directory, "resources/config_schema.json"), 'r') as f:
            source_config_schema = f.read()
            conditional_config_schema = source_config_template.substitute({
                "dataSource": directory,
                "source_config_schema": source_config_schema
            })
            source_config_schemas.append(conditional_config_schema)
            data_source_ids.append(directory)

    source_config_schema_str = ",".join(source_config_schemas)

    data_source_ids_str = ",".join([f'"{x}"' for x in data_source_ids])

    template_data = {
        "source_config_schemas": source_config_schema_str,
        "data_source_ids": data_source_ids_str
    }

    with open(CONFIG_SCHEMA_TEMPLATE_FILE, 'r') as template_file:
        template_json = template_file.read()
    template = Template(template_json)
    filled_template = template.substitute(template_data)

    # convert to dictionary and back to json to format nicely
    pretty_config_str = json.dumps(json.loads(filled_template), indent=2)

    with open(CONFIG_SCHEMA_FILE, 'w') as schema_file:
        schema_file.write(pretty_config_str)
    print(f"Config schema file generated at {CONFIG_SCHEMA_FILE}")


def main():
    package_names = get_package_names(SOURCES_DIR)
    generate_go_file(package_names)
    generate_config_schema(package_names)


if __name__ == "__main__":
    main()
