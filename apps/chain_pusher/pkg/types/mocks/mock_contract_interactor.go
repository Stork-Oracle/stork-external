// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/Stork-Oracle/stork-external/apps/chain_pusher/pkg/types"
	mock "github.com/stretchr/testify/mock"
)

// NewMockContractInteractor creates a new instance of MockContractInteractor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockContractInteractor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockContractInteractor {
	mock := &MockContractInteractor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockContractInteractor is an autogenerated mock type for the ContractInteractor type
type MockContractInteractor struct {
	mock.Mock
}

type MockContractInteractor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockContractInteractor) EXPECT() *MockContractInteractor_Expecter {
	return &MockContractInteractor_Expecter{mock: &_m.Mock}
}

// BatchPushToContract provides a mock function for the type MockContractInteractor
func (_mock *MockContractInteractor) BatchPushToContract(priceUpdates map[types.InternalEncodedAssetID]types.AggregatedSignedPrice) error {
	ret := _mock.Called(priceUpdates)

	if len(ret) == 0 {
		panic("no return value specified for BatchPushToContract")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(map[types.InternalEncodedAssetID]types.AggregatedSignedPrice) error); ok {
		r0 = returnFunc(priceUpdates)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockContractInteractor_BatchPushToContract_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchPushToContract'
type MockContractInteractor_BatchPushToContract_Call struct {
	*mock.Call
}

// BatchPushToContract is a helper method to define mock.On call
//   - priceUpdates map[types.InternalEncodedAssetID]types.AggregatedSignedPrice
func (_e *MockContractInteractor_Expecter) BatchPushToContract(priceUpdates interface{}) *MockContractInteractor_BatchPushToContract_Call {
	return &MockContractInteractor_BatchPushToContract_Call{Call: _e.mock.On("BatchPushToContract", priceUpdates)}
}

func (_c *MockContractInteractor_BatchPushToContract_Call) Run(run func(priceUpdates map[types.InternalEncodedAssetID]types.AggregatedSignedPrice)) *MockContractInteractor_BatchPushToContract_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 map[types.InternalEncodedAssetID]types.AggregatedSignedPrice
		if args[0] != nil {
			arg0 = args[0].(map[types.InternalEncodedAssetID]types.AggregatedSignedPrice)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockContractInteractor_BatchPushToContract_Call) Return(err error) *MockContractInteractor_BatchPushToContract_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockContractInteractor_BatchPushToContract_Call) RunAndReturn(run func(priceUpdates map[types.InternalEncodedAssetID]types.AggregatedSignedPrice) error) *MockContractInteractor_BatchPushToContract_Call {
	_c.Call.Return(run)
	return _c
}

// GetWalletBalance provides a mock function for the type MockContractInteractor
func (_mock *MockContractInteractor) GetWalletBalance() (float64, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetWalletBalance")
	}

	var r0 float64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (float64, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() float64); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(float64)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockContractInteractor_GetWalletBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWalletBalance'
type MockContractInteractor_GetWalletBalance_Call struct {
	*mock.Call
}

// GetWalletBalance is a helper method to define mock.On call
func (_e *MockContractInteractor_Expecter) GetWalletBalance() *MockContractInteractor_GetWalletBalance_Call {
	return &MockContractInteractor_GetWalletBalance_Call{Call: _e.mock.On("GetWalletBalance")}
}

func (_c *MockContractInteractor_GetWalletBalance_Call) Run(run func()) *MockContractInteractor_GetWalletBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContractInteractor_GetWalletBalance_Call) Return(f float64, err error) *MockContractInteractor_GetWalletBalance_Call {
	_c.Call.Return(f, err)
	return _c
}

func (_c *MockContractInteractor_GetWalletBalance_Call) RunAndReturn(run func() (float64, error)) *MockContractInteractor_GetWalletBalance_Call {
	_c.Call.Return(run)
	return _c
}

// ListenContractEvents provides a mock function for the type MockContractInteractor
func (_mock *MockContractInteractor) ListenContractEvents(ctx context.Context, ch chan map[types.InternalEncodedAssetID]types.InternalTemporalNumericValue) {
	_mock.Called(ctx, ch)
	return
}

// MockContractInteractor_ListenContractEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListenContractEvents'
type MockContractInteractor_ListenContractEvents_Call struct {
	*mock.Call
}

// ListenContractEvents is a helper method to define mock.On call
//   - ctx context.Context
//   - ch chan map[types.InternalEncodedAssetID]types.InternalTemporalNumericValue
func (_e *MockContractInteractor_Expecter) ListenContractEvents(ctx interface{}, ch interface{}) *MockContractInteractor_ListenContractEvents_Call {
	return &MockContractInteractor_ListenContractEvents_Call{Call: _e.mock.On("ListenContractEvents", ctx, ch)}
}

func (_c *MockContractInteractor_ListenContractEvents_Call) Run(run func(ctx context.Context, ch chan map[types.InternalEncodedAssetID]types.InternalTemporalNumericValue)) *MockContractInteractor_ListenContractEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 chan map[types.InternalEncodedAssetID]types.InternalTemporalNumericValue
		if args[1] != nil {
			arg1 = args[1].(chan map[types.InternalEncodedAssetID]types.InternalTemporalNumericValue)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockContractInteractor_ListenContractEvents_Call) Return() *MockContractInteractor_ListenContractEvents_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockContractInteractor_ListenContractEvents_Call) RunAndReturn(run func(ctx context.Context, ch chan map[types.InternalEncodedAssetID]types.InternalTemporalNumericValue)) *MockContractInteractor_ListenContractEvents_Call {
	_c.Run(run)
	return _c
}

// PullValues provides a mock function for the type MockContractInteractor
func (_mock *MockContractInteractor) PullValues(encodedAssetIDs []types.InternalEncodedAssetID) (map[types.InternalEncodedAssetID]types.InternalTemporalNumericValue, error) {
	ret := _mock.Called(encodedAssetIDs)

	if len(ret) == 0 {
		panic("no return value specified for PullValues")
	}

	var r0 map[types.InternalEncodedAssetID]types.InternalTemporalNumericValue
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]types.InternalEncodedAssetID) (map[types.InternalEncodedAssetID]types.InternalTemporalNumericValue, error)); ok {
		return returnFunc(encodedAssetIDs)
	}
	if returnFunc, ok := ret.Get(0).(func([]types.InternalEncodedAssetID) map[types.InternalEncodedAssetID]types.InternalTemporalNumericValue); ok {
		r0 = returnFunc(encodedAssetIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[types.InternalEncodedAssetID]types.InternalTemporalNumericValue)
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]types.InternalEncodedAssetID) error); ok {
		r1 = returnFunc(encodedAssetIDs)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockContractInteractor_PullValues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PullValues'
type MockContractInteractor_PullValues_Call struct {
	*mock.Call
}

// PullValues is a helper method to define mock.On call
//   - encodedAssetIDs []types.InternalEncodedAssetID
func (_e *MockContractInteractor_Expecter) PullValues(encodedAssetIDs interface{}) *MockContractInteractor_PullValues_Call {
	return &MockContractInteractor_PullValues_Call{Call: _e.mock.On("PullValues", encodedAssetIDs)}
}

func (_c *MockContractInteractor_PullValues_Call) Run(run func(encodedAssetIDs []types.InternalEncodedAssetID)) *MockContractInteractor_PullValues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []types.InternalEncodedAssetID
		if args[0] != nil {
			arg0 = args[0].([]types.InternalEncodedAssetID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockContractInteractor_PullValues_Call) Return(internalEncodedAssetIDToInternalTemporalNumericValue map[types.InternalEncodedAssetID]types.InternalTemporalNumericValue, err error) *MockContractInteractor_PullValues_Call {
	_c.Call.Return(internalEncodedAssetIDToInternalTemporalNumericValue, err)
	return _c
}

func (_c *MockContractInteractor_PullValues_Call) RunAndReturn(run func(encodedAssetIDs []types.InternalEncodedAssetID) (map[types.InternalEncodedAssetID]types.InternalTemporalNumericValue, error)) *MockContractInteractor_PullValues_Call {
	_c.Call.Return(run)
	return _c
}
