// @path: /apps/data_provider/lib/sources/{{ .LowerStr }}/init.go
// Code initially generated by gen.go.
// This file initializes the data source and registers it, allowing it to be built by the DataProviderRunner.

package {{ .LowerStr }}

import (
	"github.com/Stork-Oracle/stork-external/apps/data_provider/lib/sources"
	"github.com/Stork-Oracle/stork-external/apps/data_provider/lib/types"
	"github.com/Stork-Oracle/stork-external/apps/data_provider/lib/utils"
	"github.com/mitchellh/mapstructure"
)

var {{ .PascalStr }}DataSourceId types.DataSourceId = types.DataSourceId(utils.GetCurrentDirName())

type {{ .CamelStr }}DataSourceFactory struct{}

func (f *{{ .CamelStr }}DataSourceFactory) Build(sourceConfig types.DataProviderSourceConfig) types.DataSource {
	return new{{ .PascalStr }}DataSource(sourceConfig)
}

func init() {
	sources.RegisterDataSourceFactory({{ .PascalStr }}DataSourceId, &{{ .CamelStr }}DataSourceFactory{})
}

// assert we're satisfying our interfaces
var (
	_ types.DataSource        = (*{{ .CamelStr }}DataSource)(nil)
	_ types.DataSourceFactory = (*{{ .CamelStr }}DataSourceFactory)(nil)
)

func GetSourceSpecificConfig(sourceConfig types.DataProviderSourceConfig) ({{ .PascalStr }}Config, error) {
	var config {{ .PascalStr }}Config
	err := mapstructure.Decode(sourceConfig.Config, &config)

	return config, err
}
