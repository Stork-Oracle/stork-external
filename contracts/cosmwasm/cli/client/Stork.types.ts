/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.12.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export type Uint128 = string;
export interface InstantiateMsg {
  single_update_fee: Coin;
  stork_evm_public_key: [number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number];
}
export interface Coin {
  amount: Uint128;
  denom: string;
}
export type ExecuteMsg = ExecMsg;
export type ExecMsg = {
  update_temporal_numeric_values_evm: {
    update_data: UpdateData[];
  };
} | {
  set_single_update_fee: {
    fee: Coin;
  };
} | {
  set_stork_evm_public_key: {
    stork_evm_public_key: [number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number];
  };
} | {
  set_owner: {
    owner: Addr;
  };
};
export type Int128 = string;
export type Uint64 = string;
export type Addr = string;
export interface UpdateData {
  id: [number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number];
  publisher_merkle_root: [number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number];
  r: [number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number];
  s: [number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number];
  temporal_numeric_value: TemporalNumericValue;
  v: number;
  value_compute_alg_hash: [number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number];
}
export interface TemporalNumericValue {
  quantized_value: Int128;
  timestamp_ns: Uint64;
}
export type QueryMsg = QueryMsg1;
export type QueryMsg1 = {
  get_latest_canonical_temporal_numeric_value_unchecked: {
    id: [number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number];
  };
} | {
  get_single_update_fee: {};
} | {
  get_stork_evm_public_key: {};
} | {
  get_owner: {};
};
export interface GetTemporalNumericValueResponse {
  temporal_numeric_value: TemporalNumericValue;
}
export interface GetOwnerResponse {
  owner: Addr;
}
export interface GetSingleUpdateFeeResponse {
  fee: Coin;
}
export interface GetStorkEvmPublicKeyResponse {
  stork_evm_public_key: [number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number];
}