/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.12.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Uint128, InstantiateMsg, Coin, ExecuteMsg, ExecMsg, Int128, Uint64, Addr, UpdateData, TemporalNumericValue, QueryMsg, QueryMsg1, GetTemporalNumericValueResponse, GetOwnerResponse, GetSingleUpdateFeeResponse, GetStorkEvmPublicKeyResponse } from "./Stork.types";
export interface StorkReadOnlyInterface {
  contractAddress: string;
  getLatestCanonicalTemporalNumericValueUnchecked: ({
    id
  }: {
    id: number[];
  }) => Promise<GetTemporalNumericValueResponse>;
  getSingleUpdateFee: () => Promise<GetSingleUpdateFeeResponse>;
  getStorkEvmPublicKey: () => Promise<GetStorkEvmPublicKeyResponse>;
  getOwner: () => Promise<GetOwnerResponse>;
}
export class StorkQueryClient implements StorkReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getLatestCanonicalTemporalNumericValueUnchecked = this.getLatestCanonicalTemporalNumericValueUnchecked.bind(this);
    this.getSingleUpdateFee = this.getSingleUpdateFee.bind(this);
    this.getStorkEvmPublicKey = this.getStorkEvmPublicKey.bind(this);
    this.getOwner = this.getOwner.bind(this);
  }
  getLatestCanonicalTemporalNumericValueUnchecked = async ({
    id
  }: {
    id: number[];
  }): Promise<GetTemporalNumericValueResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_latest_canonical_temporal_numeric_value_unchecked: {
        id
      }
    });
  };
  getSingleUpdateFee = async (): Promise<GetSingleUpdateFeeResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_single_update_fee: {}
    });
  };
  getStorkEvmPublicKey = async (): Promise<GetStorkEvmPublicKeyResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_stork_evm_public_key: {}
    });
  };
  getOwner = async (): Promise<GetOwnerResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_owner: {}
    });
  };
}
export interface StorkInterface extends StorkReadOnlyInterface {
  contractAddress: string;
  sender: string;
  updateTemporalNumericValuesEvm: ({
    updateData
  }: {
    updateData: UpdateData[];
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  setSingleUpdateFee: ({
    fee
  }: {
    fee: Coin;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  setStorkEvmPublicKey: ({
    storkEvmPublicKey
  }: {
    storkEvmPublicKey: number[];
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  setOwner: ({
    owner
  }: {
    owner: Addr;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
}
export class StorkClient extends StorkQueryClient implements StorkInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateTemporalNumericValuesEvm = this.updateTemporalNumericValuesEvm.bind(this);
    this.setSingleUpdateFee = this.setSingleUpdateFee.bind(this);
    this.setStorkEvmPublicKey = this.setStorkEvmPublicKey.bind(this);
    this.setOwner = this.setOwner.bind(this);
  }
  updateTemporalNumericValuesEvm = async ({
    updateData
  }: {
    updateData: UpdateData[];
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_temporal_numeric_values_evm: {
        update_data: updateData
      }
    }, fee_, memo_, funds_);
  };
  setSingleUpdateFee = async ({
    fee
  }: {
    fee: Coin;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_single_update_fee: {
        fee
      }
    }, fee_, memo_, funds_);
  };
  setStorkEvmPublicKey = async ({
    storkEvmPublicKey
  }: {
    storkEvmPublicKey: number[];
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_stork_evm_public_key: {
        stork_evm_public_key: storkEvmPublicKey
      }
    }, fee_, memo_, funds_);
  };
  setOwner = async ({
    owner
  }: {
    owner: Addr;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_owner: {
        owner
      }
    }, fee_, memo_, funds_);
  };
}