/*! [![stork logo](https://raw.githubusercontent.com/Stork-Oracle/stork-external/refs/heads/main/public/stork-logo-slim.png)](https://stork.network)

This is the official Stork Contract / Rust SDK to build CosmWasm contracts that consume Stork price feeds. This crate is maintained by [Stork Labs](https://stork.network).

A top level overview can be found in [the libraries entry in crates.io](https://crates.io/crates/stork-cw).

# Pull Model

The Stork CosmWasm Contract allows users to consume Stork price updates on a pull basis. This puts the responsibility of submitting the price updates on-chain to the user whenever they want to interact with an app that consumes Stork price feeds. Stork Labs maintains a [Chain Pusher](https://github.com/stork-oracle/stork-external/tree/main/apps/docs/chain_pusher.md) in order to do this.

# Stork Feeds

On CosmWasm, Stork feeds exist inside a table stored on-chain. This table associates a given encoded asset id (keccak256 of the plaintext asset id) with a [`TemporalNumericValue`](./src/temporal_numeric_value.rs) instance.

# Sylvia

This contract is built using the [Sylvia Framework](https://github.com/CosmWasm/sylvia), a framework for building CosmWasm contracts with reduced verbosity. Due to this, some important exports are generated by Sylvia macros, and are not evidently present when reading the unexpanded code. Examples are
- `QueryMsg` enum
- `ExecMsg` enum
to name a few. These live in the `stork-cw::contract::sv` module.

**When using this crate as an SDK, you MUST enable the `library` feature to avoid entrypoint collision.**
*/

pub mod contract;
pub mod error;
pub mod events;
#[cfg(test)]
mod multitest;
pub mod responses;
pub mod temporal_numeric_value;
pub mod verify;
