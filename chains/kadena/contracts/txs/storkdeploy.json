{"cmds":[{"hash":"KGFo2IFQAUUsxNvE3fbKHT5hRK2-RGyW2xmsGJ23EHA","sigs":[{"sig":"64e78c9e7f1fec7b3fc62048b748dac0f4fca3f9596d0569e6d3714705367287aa4dfff167c28dc1202013af3f9bab0392809cc569c1bac506be6f91617cda0f"}],"cmd":"{\"networkId\":\"development\",\"payload\":{\"exec\":{\"data\":{\"stork\":{\"pred\":\"keys-all\",\"keys\":[\"5cc0092889287113bd1d44beebc4f57ae8c46c915702df7870fdac83aae27e4d\"]}},\"code\":\"(define-namespace 'stork (read-keyset 'stork) (read-keyset 'stork))\\n(namespace 'stork)\\n(define-keyset \\\"stork.stork-admin\\\" (read-keyset \\\"stork\\\"))\\n\\n(module stork GOVERNANCE\\n    ;; Imports\\n    (use coin)\\n\\n    ;; Constants\\n    (defconst STATE_KEY:string \\\"state\\\")\\n\\n    ; Error constants\\n    (defconst ERR_FEED_NOT_FOUND:string \\\"Feed not found\\\")\\n    (defconst ERR_NOT_INITIALIZED:string \\\"Contract is not initialized\\\")\\n    (defconst ERR_ALREADY_INITIALIZED:string \\\"Contract is already initialized\\\")\\n    (defconst ERR_INSUFFICIENT_FEE:string \\\"Insufficient fee\\\")\\n\\n    ; Return constants\\n    (defconst UPDATED_TEMPORAL_NUMERIC_VALUE:string \\\"Successfully updated temporal numeric value\\\")\\n    (defconst NOT_UPDATED_TEMPORAL_NUMERIC_VALUE:string \\\"Did not update temporal numeric value; value is stale\\\")\\n    (defconst UPDATED_SINGLE_UPDATE_FEE_IN_STU:string \\\"Successfully updated single update fee in stu\\\")\\n    (defconst UPDATED_STORK_EVM_PUBLIC_KEY:string \\\"Successfully updated stork EVM public key\\\")\\n    (defconst INITIALIZED_CONTRACT:string \\\"Successfully initialized contract\\\") \\n\\n    ; Treasury\\n    (defconst TREASURY_ACCOUNT:string \\\"stork-treasury\\\")\\n\\n    ;; Capabilities\\n\\n    (defcap GOVERNANCE () \\n        @doc \\\"Governance capability for the module.\\\"\\n        (enforce-keyset \\\"stork.stork-admin\\\")\\n    )    \\n\\n    (defcap INITIALIZED ()\\n        @doc \\\"Used to enforce that the contract is initialized.\\\"\\n        (let ((initialized (is-initialized)))\\n            (enforce initialized ERR_NOT_INITIALIZED)\\n            true \\n        )\\n    )\\n\\n    (defcap NOT_INITIALIZED ()\\n        @doc \\\"Used to enforce that the contract is not initialized.\\\"\\n        (let ((initialized (is-initialized)))\\n            (enforce (not initialized) ERR_ALREADY_INITIALIZED)\\n            true\\n        )\\n    )\\n\\n    (defcap TEMPORAL_NUMERIC_VALUE_EXISTS (encodedAssetId:string)\\n        @doc \\\"Used to enforce that a temporal numeric value exists for a specific encoded asset id.\\\"\\n        (let ((exists (temporal-numeric-value-exists encodedAssetId)))\\n            (enforce exists ERR_FEED_NOT_FOUND)\\n            true\\n        )\\n    )\\n\\n    ;; Events\\n    \\n    (defcap CONTRACT_INITIALIZED (storkEvmPublicKey:string singleUpdateFeeInStu:integer)\\n        @doc \\\"Event emitted when the contract is initialized.\\\"\\n        @event \\n        true\\n    )\\n\\n    (defcap STORK_EVM_PUBLIC_KEY_UPDATED (newStorkEvmPublicKey:string)\\n        @doc \\\"Event emitted when the stork evm public key on the state is updated.\\\"\\n        @event\\n        true\\n    )\\n\\n    (defcap SINGLE_UPDATE_FEE_IN_STU_UPDATED (newSinglUpdateFeeInStu:integer)\\n        @doc \\\"Event emitted when the single update fee in stu on the state is updated.\\\"\\n        @event\\n        true\\n    )\\n\\n    (defcap VALUE_UPDATE (encodedAssetId:string temporalNumericValue:object{temporal-numeric-value})\\n        @doc \\\"Event emitted when a temporal numeric value is updated.\\\"\\n        @event\\n        true\\n    )\\n\\n    ;; State storage.\\n    ;; We use a table for state storage, but as an invariant of this contract there's only ever one entry in the table.\\n    ;; The single entry is keyed by the STATE_KEY const.\\n\\n    ; schema \\n    (defschema state\\n        @doc \\\"Schema for the state of the contract. \\\\\\n        \\\\ - storkEvmPublicKey:string - The stork EVM public key. \\\\\\n        \\\\ - singleUpdateFeeInStu:integer - The single update fee in stu. \\\\\\n        \\\\ Note: This table is intended to be used as a single entry table.\\\"\\n        storkEvmPublicKey:string\\n        singleUpdateFeeInStu:integer\\n    )\\n\\n    ; table \\n    (deftable state-table:{state})\\n\\n    ;; Storage for temporal numeric values\\n\\n    ; Schema\\n    (defschema temporal-numeric-value\\n        @doc \\\"Schema for a temporal numeric value. Intended use with a table is to use the encoded asset id as the key. \\\\\\n        \\\\ - timestampNs:integer - The unix nanosecond timestamp of the temporal numeric value. \\\\\\n        \\\\ - quantizedValue:integer - The quantized value of the temporal numeric value.\\\"\\n        timestampNs:integer\\n        quantizedValue:integer\\n    )\\n    \\n    ; Table\\n    (deftable temporal-numeric-values-table:{temporal-numeric-value})\\n\\n    ;; Admin Functions\\n\\n    (defun initialize:string (storkEvmPublicKey:string singleUpdateFeeInStu:integer)\\n        @doc \\\"Initializes the contract with the given stork EVM public key and single update fee in stu. \\\\\\n        \\\\ Parameters: \\\\\\n        \\\\ - storkEvmPublicKey:string - The stork EVM public key. \\\\\\n        \\\\ - singleUpdateFeeInStu:integer - The single update fee in stu. \\\\\\n        \\\\ Returns \\\\\\n        \\\\ string - Success message \\\"\\n\\n        (with-capability (NOT_INITIALIZED)\\n            (with-capability (GOVERNANCE)\\n                ; Set up state\\n                (insert state-table STATE_KEY\\n                    {\\n                        \\\"storkEvmPublicKey\\\": storkEvmPublicKey,\\n                        \\\"singleUpdateFeeInStu\\\": singleUpdateFeeInStu\\n                    }\\n                )\\n                ; Create treasury account \\n                ;  (coin.create_account TREASURY_ACCOUNT (create-capability-gaurd (GOVERNANCE)))\\n\\n                INITIALIZED_CONTRACT\\n            )\\n        )\\n    )\\n\\n    (defun update-stork-evm-public-key (storkEvmPublicKey:string)\\n        @doc \\\"Updates the stork EVM public key in the state. \\\\\\n        \\\\ Parameters: \\\\\\n        \\\\ - string - The stork EVM public key. \\\\\\n        \\\\ Returns \\\\\\n        \\\\ string - Success message \\\"\\n\\n        (with-capability (INITIALIZED)\\n            (with-capability (GOVERNANCE)\\n                (update state-table STATE_KEY\\n                    {\\n                        \\\"storkEvmPublicKey\\\": storkEvmPublicKey,\\n                        \\\"singleUpdateFeeInStu\\\": (get-single-update-fee-in-stu)\\n                    }\\n                )\\n                UPDATED_STORK_EVM_PUBLIC_KEY\\n            )\\n        )\\n    )\\n\\n    (defun update-single-update-fee-in-stu (singleUpdateFeeInStu:integer)\\n        @doc \\\"Updates the single update fee in stu in the state. \\\\\\n        \\\\ Parameters: \\\\\\n        \\\\ - singleUpdateFeeInStu:integer - The single update fee in stu. \\\\\\n        \\\\ Returns \\\\\\n        \\\\ string - Success message \\\"\\n\\n        (with-capability (INITIALIZED)\\n            (with-capability (GOVERNANCE)\\n                (update state-table STATE_KEY\\n                    {\\n                        \\\"storkEvmPublicKey\\\": (get-stork-evm-public-key),\\n                        \\\"singleUpdateFeeInStu\\\": singleUpdateFeeInStu\\n                    }\\n                )\\n                UPDATED_SINGLE_UPDATE_FEE_IN_STU\\n            )\\n        )\\n    )\\n\\n    ;; State Getters\\n\\n    (defun get-stork-evm-public-key:string ()\\n        @doc \\\"Gets the stork EVM public key from the state. \\\\\\n        \\\\ Returns: \\\\\\n        \\\\ - string - The stork EVM public key.\\\"\\n        \\n        (with-capability (INITIALIZED)\\n            (with-read\\n                state-table\\n                STATE_KEY\\n                {\\n                    \\\"storkEvmPublicKey\\\" := storkEvmPublicKey \\n                }\\n                storkEvmPublicKey \\n            )\\n        )\\n    )\\n\\n    (defun get-single-update-fee-in-stu:integer ()\\n        @doc \\\"Gets the single update fee in stu from the state. \\\\\\n        \\\\ Returns: \\\\\\n        \\\\ - integer - The single update fee in stu.\\\"\\n        \\n        (with-capability (INITIALIZED)\\n            (with-read state-table STATE_KEY\\n            {\\n                \\\"singleUpdateFeeInStu\\\" := singleUpdateFeeInStu\\n                }\\n                singleUpdateFeeInStu\\n            )\\n        )\\n    )\\n\\n    ;; Temporal Numeric Value Functions\\n\\n    (defun update-temporal-numeric-value-evm:string (\\n        payer:string\\n        encodedAssetId:string\\n        temporalNumericValueTimestampNs:integer\\n        temporalNumericValueQuantizedValue:integer\\n        publisherMerkleRoot:string\\n        valueComputeAlgHash:string\\n        r:string\\n        s:string\\n        v:string\\n    )\\n        @doc \\\"Updates a single temporal numeric value. \\\\\\n        \\\\ Parameters: \\\\\\n        \\\\ - payer:string - The payer of the fee. \\\\\\n        \\\\ - encodedAssetId:string - The encoded asset id in the form of a hex string. \\\\\\n        \\\\ - temporalNumericValueTimestampNs:integer - The unix nanosecond timestamp of the temporal numeric value. \\\\\\n        \\\\ - temporalNumericValueQuantizedValue:integer - The quantized value of the temporal numeric value. \\\\\\n        \\\\ - publisherMerkleRoot:string - The publisher merkle root in the form of a hex string. \\\\\\n        \\\\ - valueComputeAlgHash:string - The value compute algorithm hash in the form of a hex string. \\\\\\n        \\\\ - r:string - The r signature component in the form of a hex string. \\\\\\n        \\\\ - s:string - The s signature component in the form of a hex string. \\\\\\n        \\\\ - v:string - The v signature component in the form of a hex string. \\\\\\n        \\\\ Returns: \\\\\\n        \\\\ - string - Status message\\\"\\n        ; Get single update fee\\n        (with-capability (INITIALIZED)\\n            (let (\\n                (fee (get-single-update-fee-in-stu))\\n                (balance (coin.get-balance payer))\\n                (temporalNumericValue \\n                    {\\n                        \\\"timestampNs\\\": temporalNumericValueTimestampNs,\\n                        \\\"quantizedValue\\\": temporalNumericValueQuantizedValue\\n                    }\\n                )\\n                )\\n                \\n                ; Check balance\\n                (enforce (>= balance fee) ERR_INSUFFICIENT_FEE)\\n\\n                ; TODO: signature verification\\n                \\n                (if (if (temporal-numeric-value-exists encodedAssetId)\\n                    (with-read temporal-numeric-values-table encodedAssetId\\n                        {\\n                            \\\"timestampNs\\\" := existingTimestampNs \\n                        }\\n                        (if (> temporalNumericValueTimestampNs existingTimestampNs)\\n                            true\\n                            false\\n                        )\\n                    )\\n                    true\\n                )\\n                (let ((_ 0)) \\n                    ; write value\\n                    (write-temporal-numeric-value encodedAssetId)\\n\\n                    ; transfer fee\\n                    (coin.transfer payer TREASURY_ACCOUNT fee)\\n\\n                    UPDATED_TEMPORAL_NUMERIC_VALUE\\n\\n                )\\n                NOT_UPDATED_TEMPORAL_NUMERIC_VALUE\\n                )\\n            )\\n        )\\n    )\\n\\n    (defun get-latest-temporal-numeric-value-unchecked:object{temporal-numeric-value} (encodedAssetId:string)\\n        @doc \\\"Gets the latest temporal numeric value for a specific encoded asset id. \\\\\\n        \\\\ Parameters: \\\\\\n        \\\\ - encodedAssetId:string - The encoded asset id in the form of a hex string. \\\\\\n        \\\\ Returns: \\\\\\n        \\\\ - object{temporal-numeric-value} - The latest temporal numeric value for the encoded asset id.\\\"\\n       \\n        (with-capability (INITIALIZED)\\n            (with-capability (TEMPORAL_NUMERIC_VALUE_EXISTS encodedAssetId)\\n                (read temporal-numeric-values-table encodedAssetId)\\n            )\\n        )\\n    )\\n    \\n    ;; Helper functions\\n\\n    (defun is-initialized:bool ()\\n        @doc \\\"Checks whether the contract is initialized. \\\\\\n        \\\\ Returns: \\\\\\n        \\\\ - bool - True if the contract is initialized, false otherwise.\\\"\\n        \\n        (contains STATE_KEY (keys state-table))\\n    )\\n\\n    (defun temporal-numeric-value-exists:bool (encodedAssetId:string)\\n        @doc \\\"Checks whether a temporal numeric value exists for a specific encoded asset id. \\\\\\n        \\\\ Parameters: \\\\\\n        \\\\ - encodedAssetId:string - The encoded asset id in the form of a hex string. \\\\\\n        \\\\ Returns: \\\\\\n        \\\\ - bool - True if the temporal numeric value exists, false otherwise.\\\"\\n        \\n        ; requiring this capability without attempting to acquire effectively makes this an internal function\\n        (require-capability (INITIALIZED))\\n        (contains encodedAssetId (keys temporal-numeric-values-table))\\n    )\\n\\n    (defun write-temporal-numeric-value:string (encodedAssetId:string temporalNumericValue:object{temporal-numeric-value})\\n        @doc \\\"Writes a temporal numeric value for a specific encoded asset id. \\\\\\n        \\\\ Parameters: \\\\\\n        \\\\ - encodedAssetId:string - The encoded asset id in the form of a hex string. \\\\\\n        \\\\ - temporalNumericValue:object{temporal-numeric-value} - The temporal numeric value to write. \\\\\\n        \\\\ Returns: \\\\\\n        \\\\ - string - A success message.\\\"\\n\\n        ; requiring this capability without attempting to acquire effectively makes this an internal function\\n        (require-capability (INITIALIZED))\\n\\n        ; write tnv\\n        (write temporal-numeric-values-table encodedAssetId temporalNumericValue)\\n\\n        ; emit event\\n        (emit-event (VALUE_UPDATE encodedAssetId temporalNumericValue))\\n\\n        UPDATED_TEMPORAL_NUMERIC_VALUE\\n    )\\n)\\n; Create tables necessary for the contract\\n(create-table stork.temporal-numeric-values-table)\\n(create-table stork.state-table)\\n\"}},\"signers\":[{\"pubKey\":\"5cc0092889287113bd1d44beebc4f57ae8c46c915702df7870fdac83aae27e4d\",\"clist\":[{\"name\":\"coin.GAS\",\"args\":[]}]}],\"meta\":{\"creationTime\":1758830352,\"ttl\":7200,\"gasLimit\":100000,\"chainId\":\"1\",\"gasPrice\":1.0e-5,\"sender\":\"k:5cc0092889287113bd1d44beebc4f57ae8c46c915702df7870fdac83aae27e4d\"},\"nonce\":\"2025-09-25 19:59:12.494011 UTC\"}"}]}
